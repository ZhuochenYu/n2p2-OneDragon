import os
import sys
import argparse
from ase.io import read, write
import numpy as np

def read_cell_from_inp(file_path):
    cell = []
    start_reading = False
    with open(file_path, 'r') as file:
        for line in file:
            line_lower = line.lower()
            if '&cell' in line_lower:
                start_reading = True
                continue
            if '&end cell' in line_lower:
                break
            if start_reading and line.strip():
                parts = line.split()
                if parts[0].upper() in ['A', 'B', 'C']:
                    cell.append([float(parts[i]) for i in range(1, 4)])
    return np.array(cell)

def generator():
    parser = argparse.ArgumentParser(description="cp2k aimd output files with .xyz format.")
    parser.add_argument('pos_path', help='Path to coords.xyz file.')
    parser.add_argument('frc_path', help='Path to forces.xyz file.')
    parser.add_argument('cp2k_inp', help='Path to cp2k.inp input file.')
    args = parser.parse_args()

    # data_path: directory of the current command line
    data_path = os.getcwd()

    # Input cell parameter here, a 3x3 list
    cell = read_cell_from_inp(args.cp2k_inp)

    # Read coords and forces
    pos = read(args.pos_path, index=":")
    frc = read(args.frc_path, index=":")

    out_path = os.path.join(data_path, "input.data")
    with open(out_path, "w") as fw:
        for frame_idx in range(len(pos)):
            fw.write("begin\n")
            for i in range(3):
                fw.write("lattice{:10.4f}{:10.4f}{:10.4f}\n".format(cell[i][0], cell[i][1], cell[i][2]))
            for atom in zip(pos[frame_idx], frc[frame_idx]):
                fw.write("atom{:12.5f}{:12.5f}{:12.5f}".format(atom[0].position[0], atom[0].position[1], atom[0].position[2]))
                fw.write("     {}".format(atom[0].symbol))
                fw.write("{:10.4f}{:10.4f}".format(0.0, 0.0))
                fw.write("{:12.5f}{:12.5f}{:12.5f}\n".format(atom[1].position[0], atom[1].position[1], atom[1].position[2]))
            fw.write("energy{:20.4f}\n".format(pos[frame_idx].info['E']))
            fw.write("charge{:20.4f}\n".format(0.0))
            fw.write("end\n")

if __name__ == '__main__':
    generator()

